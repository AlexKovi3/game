import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Хрестики-Нолики")
        self.root.geometry("400x550")
        self.board = [''] * 9
        self.current_player = 'X'
        self.buttons = []
        self.vs_bot = False
        self.player1_name = ""
        self.player2_name = ""

        self.status_label = tk.Label(self.root, text="Виберіть режим гри", font='Arial 14')
        self.status_label.grid(row=0, column=0, columnspan=3)

        self.create_menu_buttons()

    def create_menu_buttons(self):
        self.single_player_button = tk.Button(self.root, text='Одиночна', font='Arial 14 bold', command=self.single_player_mode)
        self.single_player_button.grid(row=1, column=0, columnspan=3)

        self.against_bot_button = tk.Button(self.root, text='Проти Бота', font='Arial 14 bold', command=self.against_bot_mode)
        self.against_bot_button.grid(row=2, column=0, columnspan=3)

    def single_player_mode(self):
        self.vs_bot = False
        self.single_player_button.grid_forget()
        self.against_bot_button.grid_forget()

        self.status_label.config(text="Введіть імена гравців")

        self.player1_label = tk.Label(self.root, text="Ім'я гравця 1 (X):", font='Arial 12')
        self.player1_label.grid(row=3, column=0, columnspan=3)
        self.player1_entry = tk.Entry(self.root, font='Arial 12')
        self.player1_entry.grid(row=4, column=0, columnspan=3)

        self.player2_label = tk.Label(self.root, text="Ім'я гравця 2 (O):", font='Arial 12')
        self.player2_label.grid(row=5, column=0, columnspan=3)
        self.player2_entry = tk.Entry(self.root, font='Arial 12')
        self.player2_entry.grid(row=6, column=0, columnspan=3)

        self.continue_button = tk.Button(self.root, text='Продовжити', font='Arial 12 bold', command=self.start_single_player)
        self.continue_button.grid(row=7, column=0, columnspan=3)

    def against_bot_mode(self):
        self.vs_bot = True
        self.single_player_button.grid_forget()
        self.against_bot_button.grid_forget()

        self.status_label.config(text="Введіть ім'я гравця:")

        self.player1_label = tk.Label(self.root, text="Ім'я гравця (X):", font='Arial 12')
        self.player1_label.grid(row=3, column=0, columnspan=3)
        self.player1_entry = tk.Entry(self.root, font='Arial 12')
        self.player1_entry.grid(row=4, column=0, columnspan=3)

        self.continue_button = tk.Button(self.root, text='Продовжити', font='Arial 12 bold', command=self.start_against_bot)
        self.continue_button.grid(row=5, column=0, columnspan=3)

    def start_single_player(self):
        self.player1_name = self.player1_entry.get()
        self.player2_name = self.player2_entry.get()
        if not self.player1_name or not self.player2_name:
            messagebox.showwarning("Попередження", "Будь ласка, введіть імена обох гравців.")
            return

        self.player1_label.grid_forget()
        self.player1_entry.grid_forget()
        self.player2_label.grid_forget()
        self.player2_entry.grid_forget()
        self.continue_button.grid_forget()

        self.status_label.config(text="Починає гравець X")

        self.create_game_buttons()
        self.update_status()

    def start_against_bot(self):
        self.player1_name = self.player1_entry.get()
        if not self.player1_name:
            messagebox.showwarning("Попередження", "Будь ласка, введіть ім'я гравця.")
            return

        self.player1_label.grid_forget()
        self.player1_entry.grid_forget()
        self.continue_button.grid_forget()

        self.player2_name = "Bot"
        self.status_label.config(text=f"Гравець: {self.player1_name}")

        self.create_game_buttons()
        self.update_status()

        if self.current_player == 'O':
            self.bot_move()

    def create_game_buttons(self):
        for i in range(9):
            button = tk.Button(self.root, text='', font='Arial 20 bold', width=5, height=2,
                               command=lambda i=i: self.on_button_click(i))
            button.grid(row=i // 3 + 3, column=i % 3)  # Shift row down by 3
            self.buttons.append(button)

        self.change_mode_button = tk.Button(self.root, text='Повернутися', font='Arial 14', command=self.change_mode)
        self.change_mode_button.grid(row=6, column=0, columnspan=3)

    def on_button_click(self, index):
        if self.board[index] == '' and not self.vs_bot:
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)
            if self.check_winner():
                messagebox.showinfo("Перемога!", f"{self.get_current_player_name()} переміг!")
                self.reset_game()
            elif '' not in self.board:
                messagebox.showinfo("Нічия", "Нічия!")
                self.reset_game()
            else:
                self.current_player = 'O' if self.current_player == 'X' else 'X'
                self.update_status()
        elif self.board[index] == '' and self.vs_bot and self.current_player == 'X':
            self.board[index] = 'X'
            self.buttons[index].config(text='X')
            if self.check_winner():
                messagebox.showinfo("Перемога!", f"{self.get_current_player_name()} переміг!")
                self.reset_game()
            elif '' not in self.board:
                messagebox.showinfo("Нічия", "Нічия!")
                self.reset_game()
            else:
                self.current_player = 'O'
                self.update_status()
                self.bot_move()

    def bot_move(self):
        best_score = float('-inf')
        best_move = None
        for i in range(9):
            if self.board[i] == '':
                self.board[i] = 'O'
                score = self.minimax(self.board, 0, False)
                self.board[i] = ''
                if score > best_score:
                    best_score = score
                    best_move = i

        self.board[best_move] = 'O'
        self.buttons[best_move].config(text='O')
        if self.check_winner():
            messagebox.showinfo("Перемога!", "Бот переміг!")
            self.reset_game()
        elif '' not in self.board:
            messagebox.showinfo("Нічия", "Нічия!")
            self.reset_game()
        else:
            self.current_player = 'X'
            self.update_status()

    def minimax(self, board, depth, is_maximizing):
        if self.check_winner_static(board, 'O'):
            return 1
        elif self.check_winner_static(board, 'X'):
            return -1
        elif '' not in board:
            return 0

        if is_maximizing:
            best_score = float('-inf')
            for i in range(9):
                if board[i] == '':
                    board[i] = 'O'
                    score = self.minimax(board, depth + 1, False)
                    board[i] = ''
                    best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for i in range(9):
                if board[i] == '':
                    board[i] = 'X'
                    score = self.minimax(board, depth + 1, True)
                    board[i] = ''
                    best_score = min(score, best_score)
            return best_score

    def check_winner(self):
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ]
        for combo in winning_combinations:
            if self.board[combo[0]] == self.board[combo[1]] == self.board[combo[2]] != '':
                return True
        return False

    def check_winner_static(self, board, player):
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ]
        for combo in winning_combinations:
            if board[combo[0]] == board[combo[1]] == board[combo[2]] == player:
                return True
        return False

    def update_status(self):
        current_player_name = self.get_current_player_name()
        self.status_label.config(text=f"Хід гравця: {current_player_name}")

    def get_current_player_name(self):
        if self.current_player == 'X' and self.vs_bot:
            return self.player1_name
        elif self.current_player == 'O' and self.vs_bot:
            return self.player2_name
        else:
            return self.player1_name if self.current_player == 'X' else self.player2_name

    def change_mode(self):
        self.reset_game()
        self.status_label.config(text="Виберіть режим гри")
        for button in self.buttons:
            button.destroy()
        self.buttons = []
        self.change_mode_button.grid_forget()
        self.create_menu_buttons()

    def reset_game(self):
        self.board = [''] * 9
        for button in self.buttons:
            button.config(text='')
        self.current_player = 'X'

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
